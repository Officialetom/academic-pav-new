import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFileDownload, faFilter } from "@fortawesome/free-solid-svg-icons";
import "./styles/student.css";
import "./styles/results.css";
import Sidebar from "./components/Sidebar";
import { useState } from "react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import logo from "../../assets/apl.png";
import Navbar from "./components/Navbar";

declare module "jspdf" {
  interface jsPDF {
    lastAutoTable?: {
      finalY: number;
    };
  }
}

function Results() {
  // tabs to filter grades on semester
  const tabs = ["first", "second"];
  // array to store grades from api (limit: all)
  const grades = [
    {
      id: 1,
      title: "Data Structures",
      code: "CSC 301",
      grade: "A",
      semester: "first",
      score: 87,
    },
    {
      id: 2,
      title: "Linear Algebra",
      code: "MTH 302",
      grade: "F",
      semester: "second",
      score: 34,
    },
    {
      id: 3,
      title: "Technical Writing",
      code: "ENG 201",
      grade: "C",
      semester: "first",
      score: 53,
    },
    {
      id: 4,
      title: "Arithmetics & Geometry",
      code: "MTH 211",
      grade: "B",
      semester: "first",
      score: 62,
    },
    {
      id: 5,
      title: "Arithmetics & Geometry",
      code: "MTH 211",
      grade: "B",
      semester: "first",
      score: 62,
    },
  ];

  function handleSelect(event: any) {
    setActiveTab(event.target.value);
  }

  function handleSearch(event: any) {
    setActiveKey(event.target.value);
  }
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("all");
  const [activeKey, setActiveKey] = useState("");

  // displayed grades, then apply filter
  const visibleGrades =
    activeTab === "all"
      ? grades.filter((n) =>
          n.code.toLowerCase().includes(activeKey.toLowerCase())
        )
      : grades
          .filter((n) => n.semester === activeTab)
          .filter((n) =>
            n.code.toLowerCase().includes(activeKey.toLowerCase())
          );

  const toggleSidebar = () => setIsOpen(!isOpen);
  const closeSidebar = () => setIsOpen(false);

  // handle pdf download
  // Helpers to extract level & semester
  const getLevel = (code: any) => {
    const match = code.match(/\d{3}/);
    return match ? `${code.match(/\d/)[0]}00L` : "Unknown";
  };

  const getSemester = (code: any) => {
    const lastNum = parseInt(code.match(/\d{3}/)?.[0]?.charAt(2));
    return lastNum === 1 ? "First Semester" : "Second Semester";
  };

  // PDF Generator
  const generatePDF = () => {
    const doc = new jsPDF();

    const school = {
      name: "University of Calabar",
      address: "P.M.B. 1115, Calabar, Cross River State, Nigeria",
      logo: logo,
      student: "Ubana Etom Ofem",
    };

    // Group by Level and Semester
    const grouped: any = {};
    visibleGrades.forEach((g) => {
      const level = getLevel(g.code);
      const semester = getSemester(g.code);
      if (!grouped[level])
        grouped[level] = { "First Semester": [], "Second Semester": [] };
      grouped[level][semester].push(g);
    });

    let page = 0;
    Object.keys(grouped).forEach((level) => {
      if (page > 0) doc.addPage();

      // Header
      if (school.logo) {
        doc.addImage(school.logo, "PNG", 15, 10, 20, 20);
      }

      doc.setFontSize(14);
      doc.text(school.name, 40, 20);
      doc.setFontSize(10);
      doc.text(school.address, 40, 26);
      doc.setFontSize(12);
      doc.text(`${school.student}`, 15, 40);
      doc.setFontSize(12);
      doc.text(`Academic Results - ${level}`, 15, 50);

      // Tables for semesters
      ["First Semester", "Second Semester"].forEach((sem) => {
        const data = grouped[level][sem];
        if (data.length > 0) {
          doc.setFontSize(11);

          doc.text(
            sem,
            15,
            doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 55
          );
          autoTable(doc, {
            startY: doc.lastAutoTable ? doc.lastAutoTable.finalY + 15 : 60,
            head: [["Course Title", "Code", "Score", "Grade"]],
            body: data.map((g: any) => [g.title, g.code, g.score, g.grade]),
            theme: "striped",
            headStyles: { fillColor: [41, 128, 185], halign: "center" },
            styles: { fontSize: 10 },
          });
        }
      });

      // Footer
      const pageHeight = doc.internal.pageSize.height;
      doc.setFontSize(9);
      doc.text("Generated by Academic-Pavilion", 130, pageHeight - 10);

      page++;
    });

    doc.save("Academic_Results.pdf");
  };

  return (
    <div className="student-dashboard">
      <Sidebar isOpen={isOpen} closeSidebar={closeSidebar} page="results" />
      <div className="main-content">
        {/* dashboard navbar area */}
        <Navbar toggleSidebar={toggleSidebar} />
        {/* dashboard main content area */}
        <div className="content">
          <div className="dash-intro mb-1">
            <h3>Academic Results</h3>
            <p>View and filter your course results</p>
          </div>
          <div className="dash-card p-1">
            <div className="filter">
              <div className="selecting">
                <FontAwesomeIcon icon={faFilter} />
                <select
                  name="select_filter"
                  id="select_filter"
                  onChange={handleSelect}
                >
                  <option hidden>Filter by semester</option>
                  <option value="all">All semesters</option>
                  {tabs.map((tab) => (
                    <option key={tab} value={tab}>
                      {tab} Semester
                    </option>
                  ))}
                </select>
              </div>
              <div className="search">
                <input
                  type="search"
                  name="search_filter"
                  id="search_filter"
                  placeholder="Search by course code..."
                  onKeyUp={handleSearch}
                />
                <span onClick={generatePDF}>
                  <FontAwesomeIcon icon={faFileDownload} className="f-icon" />
                </span>
              </div>
            </div>
            <div className="result-overview mt-1">
              <table className="result">
                <thead>
                  <tr>
                    <th>Course Code</th>
                    <th>Course Title</th>
                    <th>Score</th>
                    <th>Grade</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {visibleGrades.map((item) => {
                    let gradeBg = "";
                    let statusClass = "badge-primary";
                    let status = "pass";

                    if (item.grade === "A") {
                      gradeBg = "grade-a";
                    } else if (item.grade === "B") {
                      gradeBg = "grade-b";
                    } else if (item.grade === "C") {
                      gradeBg = "grade-o";
                    } else if (item.grade === "D") {
                      gradeBg = "grade-g";
                    } else if (item.grade === "E") {
                      gradeBg = "grade-g";
                    } else {
                      gradeBg = "grade-f";
                      statusClass = "badge-danger";
                      status = "fail";
                    }

                    return (
                      <tr key={item.id}>
                        <td>{item.code}</td>
                        <td>{item.title}</td>
                        <td>{item.score}/100</td>
                        <td>
                          <span className={`grade ${gradeBg}`}>
                            {item.grade}
                          </span>
                        </td>
                        <td>
                          <span className={statusClass}>{status}</span>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Results;

